---
services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    image: ghcr.io/netresearch/timetracker:${BUILD_TARGET:-production}
    environment:
      - TRUSTED_PROXY_ALL
      - TRUSTED_PROXY_LIST
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
    volumes:
      # Production volumes (named volumes for data persistence)
      - app-pub:/var/www/html/public
      - app-cache:/var/www/html/var/cache  
      - app-logs:/var/www/html/var/log
    depends_on:
      - db
    restart: always
    profiles: 
      - prod
      - production

  # Development app service with dev tools (includes databases)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: devbox
    image: ghcr.io/netresearch/timetracker:devbox
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - APP_DEBUG=${APP_DEBUG:-1}
      - TRUSTED_PROXY_ALL
      - TRUSTED_PROXY_LIST
    volumes:
      # Development volumes (bind mounts for live editing)
      - .:/var/www/html
      - ./public:/var/www/html/public
      - ./var/cache:/var/www/html/var/cache
      - ./var/log:/var/www/html/var/log
      - /usr/local/share/ca-certificates/:/usr/local/share/ca-certificates/host
    depends_on:
      - db
      - db-test
    restart: "no"
    profiles: 
      - dev
      - development
      - test

  # Development tools service (static analysis, linting - no DB dependencies)
  app-tools:
    build:
      context: .
      dockerfile: Dockerfile
      target: devbox
    image: ghcr.io/netresearch/timetracker:devbox
    environment:
      - APP_ENV=${APP_ENV:-dev}
      - APP_DEBUG=${APP_DEBUG:-1}
    volumes:
      # Tools volumes (bind mounts for source code access only)
      - .:/var/www/html
      - ./var/cache:/var/www/html/var/cache
      - ./var/log:/var/www/html/var/log
    restart: "no"
    profiles: 
      - tools
      - dev-tools

  # Production web server
  httpd:
    image: nginx:alpine
    volumes:
      - app-pub:/var/www/html/public
      - ./nginx-conf.d-default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    restart: always
    ports:
      - ${HTTP_PORT:-8765}:80
    profiles: 
      - prod
      - production

  # Development web server  
  httpd-dev:
    image: nginx:alpine
    volumes:
      - ./public:/var/www/html/public
      - ./nginx-conf.d-dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app-dev
    restart: "no"
    ports:
      - ${HTTP_PORT:-8765}:80
    profiles: 
      - dev
      - development
      - test

  # Production database
  db:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-global123}
      - MYSQL_USER=${DB_USER:-timetracker}
      - MYSQL_PASSWORD=${DB_PASSWORD:-timetracker}
      - MYSQL_DATABASE=${DB_NAME:-timetracker}
    volumes:
      - db-data:/var/lib/mysql
      - ./sql/full.sql:/docker-entrypoint-initdb.d/001_full.sql
    restart: always
    profiles: 
      - prod
      - production
      - dev
      - development
      - test

  # Test database (for unit/integration tests)
  db-test:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${TEST_DB_ROOT_PASSWORD:-global123}
      - MYSQL_USER=${TEST_DB_USER:-unittest}
      - MYSQL_PASSWORD=${TEST_DB_PASSWORD:-unittest}
      - MYSQL_DATABASE=${TEST_DB_NAME:-unittest}
    volumes:
      - db-test-data:/var/lib/mysql
      - ./sql/unittest/001_testtables.sql:/docker-entrypoint-initdb.d/001_testtables.sql
      - ./sql/unittest/002_testdata.sql:/docker-entrypoint-initdb.d/002_testdata.sql
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD || mysqladmin ping -h 127.0.0.1 -uroot -p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s
    profiles: 
      - dev
      - development
      - test

  # Unit test database (for PHPUnit tests)
  db_unittest:
    image: mariadb
    environment:
      - MYSQL_ROOT_PASSWORD=${UNITTEST_DB_ROOT_PASSWORD:-global123}
      - MYSQL_USER=${UNITTEST_DB_USER:-unittest}
      - MYSQL_PASSWORD=${UNITTEST_DB_PASSWORD:-unittest}
      - MYSQL_DATABASE=${UNITTEST_DB_NAME:-unittest}
    volumes:
      - db-unittest-data:/var/lib/mysql
      - ./sql/unittest/001_testtables.sql:/docker-entrypoint-initdb.d/001_testtables.sql
      - ./sql/unittest/002_testdata.sql:/docker-entrypoint-initdb.d/002_testdata.sql
    restart: always
    profiles: 
      - dev
      - development
      - test

  # Development LDAP server
  ldap-dev:
    image: osixia/openldap:latest
    environment:
      - LDAP_ORGANISATION=Development Company
      - LDAP_DOMAIN=dev.local
      - LDAP_BASE_DN=dc=dev,dc=local
      - LDAP_ADMIN_PASSWORD=admin123
      - LDAP_READONLY_USER=true
      - LDAP_READONLY_USER_USERNAME=readuser
      - LDAP_READONLY_USER_PASSWORD=readuser
    volumes:
      - ldap-dev-data:/var/lib/ldap
      - ldap-dev-config:/etc/ldap/slapd.d
    ports:
      - "3389:389"
    restart: "no"
    profiles: 
      - dev
      - development
      - test

networks:
  default:
    driver: "bridge"

volumes:
  # Production volumes
  app-pub:
    driver: local
  app-cache:
    driver: local
  app-logs:
    driver: local
  db-data:
    driver: local

  # Test volumes  
  db-test-data:
    driver: local
  
  # Unit test volume
  db-unittest-data:
    driver: local
  
  # Development LDAP volumes
  ldap-dev-data:
    driver: local
  ldap-dev-config:
    driver: local