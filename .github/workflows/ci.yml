name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  qa-and-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show Docker version
        run: |
          docker --version
          docker compose version

      - name: Prepare config files
        run: |
          # Ensure PHPStan config exists
          if [ ! -f phpstan.neon ] && [ -f phpstan.dist.neon ]; then cp phpstan.dist.neon phpstan.neon; fi
          # Ensure PHPUnit config exists
          if [ ! -f phpunit.xml ] && [ -f phpunit.xml.dist ]; then cp phpunit.xml.dist phpunit.xml; fi

      - name: Install dependencies (Composer)
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm app composer install --no-interaction --prefer-dist

      - name: Prepare test database
        run: |
          # Start DB container
          docker compose -f compose.yml -f compose.dev.yml up -d db_unittest

          # Wait until DB is ready using unittest credentials (align with local dev)
          for i in {1..30}; do
            docker compose -f compose.yml -f compose.dev.yml exec -T db_unittest sh -c 'mariadb -h 127.0.0.1 -uunittest -punittest -e "SELECT 1"' && break || sleep 2;
          done

          # Manually import full structure and unittest data from host
          docker compose -f compose.yml -f compose.dev.yml exec -T db_unittest sh -c 'mariadb -h 127.0.0.1 -uunittest -punittest unittest' < sql/full.sql
          docker compose -f compose.yml -f compose.dev.yml exec -T db_unittest sh -c 'mariadb -h 127.0.0.1 -uunittest -punittest unittest' < sql/unittest/002_testdata.sql

      - name: Static analysis (PHPStan)
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm app composer analyze

      - name: Static analysis (Psalm)
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm app composer psalm

      - name: Code style (PHP_CodeSniffer)
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm app composer cs-check

      - name: Lint Twig templates
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm app composer twig:lint

      - name: Run tests (PHPUnit)
        env:
          APP_ENV: test
        run: |
          docker compose -f compose.yml -f compose.dev.yml run --rm -e APP_ENV=test app bin/phpunit


