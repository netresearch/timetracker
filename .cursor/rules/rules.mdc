---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules

# Language and Framework
- Use PHP 8.2 for all PHP development.
- Use Symfony 4.4 as the primary framework.
- Leverage PHP 8.2 features (named arguments, constructor property promotion, match expressions, etc.).
- Use typed properties and return types everywhere possible.

# Coding Standards
- Always use type hints for functions and methods.
- Replace any phpdoc @param and @return with their type hints.
- Follow PSR-12 coding standards.
- Use strict typing (declare(strict_types=1)) in all PHP files.
- Prefer early returns to reduce nesting levels.

# Static Analysis
- Write code that passes level 8 PHPStan/Psalm standards.
- Use null safe operators where appropriate.
- Follow immutable programming principles when possible.

# Security
- Follow OWASP security guidelines.
- Never trust user input - always validate and sanitize.
- Use Symfony's built-in security features (CSRF protection, encoding, etc.).
- Use parameterized queries for all database operations.

# Symfony Specifics
- Follow Symfony directory structure conventions.
- Use dependency injection and service autowiring.
- Use Symfony's Validator component for data validation.
- Leverage Symfony Events system appropriately.
- Use attribute-based configuration where possible.

# Database
- Use Doctrine ORM with proper entity relationships.
- Write optimized queries and use query builders appropriately.
- Use database transactions for operations that require atomicity.

# Testing
- Use PHPUnit for all unit and integration tests.
- Aim for high test coverage, especially for critical business logic.
- Write functional tests for important user flows.
- Use mocks and stubs appropriately to isolate units.

# Environment
- Use Docker containers for development and deployment.
- Ensure environment parity across development, staging, and production.

# Error Handling
- Use custom exceptions for domain-specific errors.
- Implement consistent exception handling throughout the application.
- Use proper logging with appropriate severity levels.

# API Development
- Follow REST or GraphQL principles consistently.
- Implement proper resource versioning.
- Use appropriate HTTP status codes and response formats.

# Additional Guidelines
- Ensure all code is well-documented.
- Maintain high test coverage for all new code.
- Regularly update dependencies to their latest stable versions. 
- Use docker compose to execute commands.
- Implement proper logging for debugging and monitoring purposes.
- Follow the principle of least privilege for all operations. 